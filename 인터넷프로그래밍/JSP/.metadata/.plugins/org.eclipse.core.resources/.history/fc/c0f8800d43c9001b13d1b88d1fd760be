package review;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import db.DBSet;

public class ReviewDAO {
	
	private Connection conn;
	private PreparedStatement pstmt;
	private ResultSet rs;
	
	public ReviewDAO() {
		conn = DBSet.getConn();
	}
	
	public int getTotalCnt(int gdCode) {
		String sql = "SELECT COUNT(*) FROM review";
		try {
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				return rs.getInt(1);
			}
			return 0; 
		}catch (Exception e) {
			e.printStackTrace();
		}
		return -1; // db오류
	}
	
	public int AddReview(Review review) {
		String sql = "INSERT INTO review (rTitle,rContents,rDate,userID,radmin) VALUES (?,?,now(),?,?)";
	
		try {
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, review.getrTitle());
			pstmt.setString(2, review.getrContents());
			pstmt.setString(3, review.getUserID());
			pstmt.setInt(4, 0);
			
			return pstmt.executeUpdate();
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return -1;
	}
	
	public int AddAdminReview(Review review) {
		String sql = "INSERT INTO review (rTitle,rContents,rDate,userID,radmin) VALUES (?,?,now(),?,?)";
		
		try {
			pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, review.getrTitle());
			pstmt.setString(2, review.getrContents());
			pstmt.setString(3, review.getUserID());
			pstmt.setInt(4, 1);
			
			return pstmt.executeUpdate();
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return -1;
	}

	
	
	public ArrayList<Review> findreviewList(){
		String sql = "SELECT * FROM review";
		ArrayList<Review> list = new ArrayList<>();
		
		try {
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next()) {
				Review review = new Review();
				review.setrID(rs.getInt(1));
				review.setrTitle(rs.getString(2));
				review.setrContents(rs.getString(3));
				review.setrDate(rs.getTimestamp(4));
				review.setUserID(rs.getString(5));
				
				list.add(review);
			}
			return list;
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return null;
	}
	
	
	public Review findreivew(int rID){
		String sql = "SELECT * FROM review WHERE rID = ?";
		
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, rID);
			
			rs = pstmt.executeQuery();
			
			if(rs.next()) {
				Review review= new Review();
				
				review.setrID(rs.getInt(1));
				review.setrTitle(rs.getString(2));
				review.setrContents(rs.getString(3));
				review.setrDate(rs.getTimestamp(4));
				review.setUserID(rs.getString(5));
				
				return review;
			}
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return null;
	}
	
	public boolean isEmpty() {
		String sql = "SELECT * FROM review";
		
		try {
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			
			while(rs.next())
				return false;
		}catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		return true;
	}
}
